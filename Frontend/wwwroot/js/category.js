// LOG 1: Confirma que o arquivo de script foi carregado e est√° sendo executado.
console.log('Script js/category.js (padr√£o similar ao de usu√°rio) EXECUTANDO.');

/**
 * Fun√ß√£o principal que inicializa o formul√°rio de categoria.
 */
function initializeCategoryForm(form) {
    if (!form) {
        console.error('FALHA CR√çTICA: Elemento <form class="category-form"> n√£o encontrado.');
        return;
    }

    console.log('üöÄ Inicializando formul√°rio de categoria...');

    form.addEventListener('submit', (event) => {
        event.preventDefault(); // Impede o recarregamento da p√°gina
        console.log('Iniciando processamento dos dados da categoria...');
        processCategoryData(form);
    });

    console.log('‚úÖ Event listener do formul√°rio de categoria configurado com sucesso!');
}

/**
 * Prepara os dados do formul√°rio para envio.
 * Usa FormData por causa do campo de arquivo.
 */
async function processCategoryData(form) {
    console.log('üîç Preparando dados (FormData)...');

    // FormData √© a maneira correta de capturar dados de um formul√°rio que inclui arquivos.
    const formData = new FormData(form);

    // Renomeia os campos para corresponder ao que a API espera (ex: 'Name', 'Description', 'ImageFile')
    formData.set('Name', formData.get('categoryName'));
    formData.set('Description', formData.get('categoryDescription'));
    formData.set('ImageFile', formData.get('categoryImage'));
    
    // Remove os nomes antigos que n√£o ser√£o usados
    formData.delete('categoryName');
    formData.delete('categoryDescription');
    formData.delete('categoryImage');
    
    // Valida√ß√£o b√°sica
    if (!formData.get('Name')) {
        alert('Por favor, preencha o nome da categoria.');
        return;
    }

    console.log('‚úÖ Dados prontos para envio.');
    await sendCategoryData(formData, form);
}

/**
 * Envia os dados da categoria para a API.
 */
async function sendCategoryData(formData, form) {
    console.log('üì° Preparando dados da categoria para envio...');

    const accessToken = localStorage.getItem('accessToken');
    if (!accessToken) {
        alert('Voc√™ n√£o est√° autenticado. Fa√ßa o login novamente.');
        return;
    }
    
    try {
        const response = await fetch('http://localhost:5087/api/categories', {
            method: 'POST',
            headers: {
                // Ao usar FormData, o √∫nico header que definimos √© o de autoriza√ß√£o.
                'Authorization': `Bearer ${accessToken}`
                // N√ÉO defina 'Content-Type'. O navegador faz isso automaticamente com o boundary correto.
            },
            body: formData, // Enviamos o objeto FormData diretamente no corpo.
        });

        if (response.status === 401) {
            alert('Sess√£o expirada. Fa√ßa login novamente.');
            return;
        }

        if (response.ok) {
            console.log('‚úÖ Categoria salva com sucesso!');
            alert('Categoria cadastrada com sucesso!');
            form.reset();
        } else {
            const errorData = await response.json().catch(() => ({}));
            const errorMessage = errorData.message || 'Erro ao salvar a categoria. Verifique os dados.';
            console.error('‚ùå Erro da API:', errorMessage);
            alert(`Erro: ${errorMessage}`);
        }
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o:', error);
        alert('Falha na comunica√ß√£o com o servidor. Verifique se a API est√° rodando.');
    }
}

// --- EXECU√á√ÉO PRINCIPAL ---
const formElement = document.querySelector('.category-form');
initializeCategoryForm(formElement);

// --- 
const fileInput = document.getElementById('categoryImage');
const fileNameDisplay = document.getElementById('fileName');
const imagePreview = document.getElementById('imagePreview');

fileInput.addEventListener('change', () => {
    const file = fileInput.files[0];
    if (file) {
    fileNameDisplay.textContent = file.name;

    const reader = new FileReader();
    reader.onload = function (e) {
        imagePreview.src = e.target.result;
        imagePreview.style.display = 'block';
    };
    reader.readAsDataURL(file);
    } else {
    fileNameDisplay.textContent = 'Nenhum arquivo selecionado';
    imagePreview.src = '';
    imagePreview.style.display = 'none';
    }
});