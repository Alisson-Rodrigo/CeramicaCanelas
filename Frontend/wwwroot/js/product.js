console.log('Script js/product.js EXECUTANDO.');

/**
 * Busca as categorias da API e preenche o campo <select> no formul√°rio.
 */
async function loadProductCategories() {
    console.log('Buscando categorias para o formul√°rio de produtos...');
    const categorySelect = document.querySelector('select[name="CategoryId"]');
    const accessToken = localStorage.getItem('accessToken');

    if (!categorySelect) return; // Se o select n√£o existir, n√£o faz nada.

    if (!accessToken) {
        categorySelect.innerHTML = '<option value="">Falha ao autenticar</option>';
        return;
    }

    try {
        const response = await fetch('http://localhost:5087/api/categories', {
            headers: { 'Authorization': `Bearer ${accessToken}` }
        });

        if (!response.ok) {
            throw new Error('N√£o foi poss√≠vel carregar as categorias.');
        }

        const categories = await response.json();
        
        // Limpa o select e adiciona as op√ß√µes recebidas da API
        categorySelect.innerHTML = '<option value="">Selecione uma categoria</option>'; 
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id; // O valor √© o UUID da categoria
            option.textContent = category.name; // O texto √© o nome
            categorySelect.appendChild(option);
        });
        console.log('Categorias carregadas com sucesso no select.');

    } catch (error) {
        console.error('Erro ao carregar categorias:', error);
        categorySelect.innerHTML = '<option value="">Erro ao carregar</option>';
    }
}

/**
 * Fun√ß√£o principal que inicializa o formul√°rio de produto.
 */
function initializeProductForm(form) {
    if (!form) {
        console.error('FALHA CR√çTICA: Elemento <form class="product-form"> n√£o encontrado.');
        return;
    }

    console.log('üöÄ Inicializando formul√°rio de produto...');
    form.addEventListener('submit', (event) => {
        event.preventDefault();
        processProductData(form);
    });
    console.log('‚úÖ Event listener do formul√°rio de produto configurado com sucesso!');
}

/**
 * Prepara os dados do formul√°rio para envio usando FormData.
 */
async function processProductData(form) {
    console.log('üîç Preparando dados do produto (FormData)...');
    const formData = new FormData(form);

    // Valida√ß√£o
    if (!formData.get('Code') || !formData.get('Name') || !formData.get('CategoryId')) {
        alert('Por favor, preencha os campos obrigat√≥rios: C√≥digo, Nome e Categoria.');
        return;
    }

    console.log('‚úÖ Dados do produto prontos para envio.');
    await sendProductData(formData, form);
}

/**
 * Envia os dados do novo produto para a API.
 */
async function sendProductData(formData, form) {
    const accessToken = localStorage.getItem('accessToken');
    if (!accessToken) {
        alert('Voc√™ n√£o est√° autenticado. Fa√ßa o login novamente.');
        return;
    }

    const API_URL = 'http://localhost:5087/api/products';
    console.log('üì° Enviando dados do produto para a API...');

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${accessToken}` },
            body: formData,
        });

        if (response.status === 401) {
            alert('Sess√£o expirada. Fa√ßa login novamente.');
            return;
        }

        if (response.ok) {
            alert('Produto cadastrado com sucesso!');
            form.reset();
        } else {
            const errorData = await response.json().catch(() => ({}));
            const errorMessage = errorData.title || errorData.message || 'Erro ao salvar o produto.';
            console.error('‚ùå Erro da API:', errorMessage, errorData);
            alert(`Erro: ${errorMessage}`);
        }
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o:', error);
        alert('Falha na comunica√ß√£o com o servidor.');
    }
}

// --- EXECU√á√ÉO PRINCIPAL ---
const formElement = document.querySelector('.product-form');
initializeProductForm(formElement); // Anexa o evento de submit ao formul√°rio
loadProductCategories(); // Busca e preenche as categorias assim que o script √© carregado