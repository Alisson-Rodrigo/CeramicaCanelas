// =======================================================
// VARI√ÅVEIS E CONSTANTES GLOBAIS DA APLICA√á√ÉO
// =======================================================
const API_BASE_URL = 'https://api.ceramicacanelas.shop/api';
// const API_BASE_URL = 'http://localhost:5087/api';
let historyItemsCache = []; // Cache para os dados do hist√≥rico
// Objetos para guardar o estado original da linha durante a edi√ß√£o
const originalRowHTML_Product = {};
const originalRowHTML_Employee = {};
const originalRowHTML_Category = {};
const originalRowHTML_Supplier = {};
// Utiliza as vari√°veis globais de main.js
const originalHistoryRowHTML = {}; // Objeto para a edi√ß√£o na tabela de hist√≥rico
let currentPage = 1;
let currentEmployeePage = 1;
const originalEntryRowHTML = {}; 
// Vari√°vel para controlar a pagina√ß√£o da tabela atual
let currentTablePage = 1;
// Este script utiliza as vari√°veis globais definidas em main.js
 // P√°gina atual da MODAL de busca de produtos
// Mapa de cargos para ser usado na tela de funcion√°rios
const positionMap = {
    0: 'Enfornador',
    1: 'Desenfornador',
    2: 'Soldador',
    3: 'Marombeiro',
    4: 'Operador de P√° Carregadeira',
    5: 'Motorista',
    6: 'Queimador',
    7: 'Conferente',
    8: 'Caixa',
    9: 'Auxiliar Administrativo',
    10: 'Auxiliar de Limpeza',
    11: 'Dono',
    12: 'Gerente',
    13: 'Auxiliar de Estoque',
    14: 'Prestador de Servi√ßos',
    15: 'Pedreiro',
};

// NOVO: Mapa para traduzir os n√∫meros das fun√ß√µes para texto
const userRolesMap = {
    0: 'Admin',
    1: 'Customer',
    2: 'Viewer'
};

// Fun√ß√£o utilit√°ria global
const getPositionName = (positionId) => positionMap[positionId] || 'Desconhecido';

// Defina a URL base da sua API aqui.
let currentSupplierPage = 1;

let currentEntryPage = 1;
let currentModalPage = 1;
let currentSupplierModalPage = 1;

let allEmployees = [];

let currentHistoryPage = 1;
let currentProductModalPage = 1;
// =======================================================
// FUN√á√ÉO PRINCIPAL DE CARREGAMENTO DE P√ÅGINAS
// =======================================================

/**
 * Carrega dinamicamente um formul√°rio e seu script correspondente.
 */
/**
 * Carrega dinamicamente um formul√°rio, seu CSS e seu script correspondente.
 * Garante que o CSS seja aplicado antes do HTML ser exibido para evitar FOUC.
let isFormLoading = false; // Trava para evitar race conditions

// ... (o resto das suas vari√°veis globais)


// =======================================================
// FUN√á√ÉO PRINCIPAL DE CARREGAMENTO DE P√ÅGINAS (REFATORADA)
// =======================================================

/**
 * Carrega dinamicamente um formul√°rio, seu CSS e seu script correspondente,
 * prevenindo carregamentos simult√¢neos para evitar race conditions.
 */
let isFormLoading = false; // Trava para evitar race conditions

async function loadForm(formName) {
    // 1. VERIFICA SE UM CARREGAMENTO J√Å EST√Å EM ANDAMENTO
    if (isFormLoading) {
        console.warn(`üö¶ AVISO: Tentativa de carregar '${formName}' enquanto outro formul√°rio est√° em andamento. A√ß√£o ignorada.`);
        return;
    }

    // 2. ATIVA A TRAVA E INICIA O PROCESSO
    isFormLoading = true;
    console.log(`‚ñ∂Ô∏è Iniciando carregamento do formul√°rio: ${formName}. Trava ativada.`);

    const container = document.getElementById('form-container');
    if (!container) {
        console.error("‚ùå ERRO: Elemento 'form-container' n√£o encontrado!");
        isFormLoading = false; // Libera a trava em caso de erro fatal
        return;
    }

    // Exibe a mensagem de carregamento
    container.innerHTML = '<h2>Carregando Formul√°rio...</h2>';
    const welcomeMessage = document.getElementById('welcome-message');
    if (welcomeMessage) {
        welcomeMessage.style.display = 'none';
    }

    try {
        // 3. LIMPEZA DOS RECURSOS ANTERIORES
        document.getElementById('dynamic-form-script')?.remove();
        document.getElementById('dynamic-form-style')?.remove();

        const htmlUrl = `/forms/${formName}.html`;
        const cssUrl = `/css/${formName}.css`;
        const jsUrl = `/js/${formName}.js`;

        // 4. CARREGAMENTO PARALELO DE HTML E CSS
        const [htmlResponse, cssResponse] = await Promise.all([
            fetch(htmlUrl),
            fetch(cssUrl).catch(err => {
                console.warn(`‚ö†Ô∏è CSS em ${cssUrl} n√£o encontrado, continuando sem ele.`);
                return null; // Falha no CSS n√£o √© fatal
            })
        ]);

        if (!htmlResponse.ok) {
            throw new Error(`Formul√°rio ${formName}.html n√£o encontrado (Status: ${htmlResponse.status}).`);
        }

        const htmlContent = await htmlResponse.text();

        // 5. INJE√á√ÉO DO CSS (SE EXISTIR)
        if (cssResponse && cssResponse.ok) {
            const cssContent = await cssResponse.text();
            const style = document.createElement('style');
            style.id = 'dynamic-form-style';
            style.textContent = cssContent;
            document.head.appendChild(style);
            console.log(`‚úÖ CSS ${formName}.css carregado e injetado.`);
        }

        // 6. INJE√á√ÉO DO HTML
        container.innerHTML = htmlContent;
        console.log(`‚úÖ HTML ${formName}.html injetado no container.`);

        // 7. CARREGAMENTO CONTROLADO DO SCRIPT USANDO PROMISE
        await new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.id = 'dynamic-form-script';
            script.src = jsUrl;

            script.onload = () => {
                console.log(`‚úÖ Script ${formName}.js carregado.`);
                // Executa a fun√ß√£o de inicializa√ß√£o do formul√°rio, se existir
                if (typeof window.initDynamicForm === 'function') {
                    console.log(`üöÄ Executando initDynamicForm() de ${formName}.js`);
                    // Idealmente, initDynamicForm tamb√©m seria ass√≠ncrona e retornaria uma promise
                    // para ser aguardada aqui, mas para este caso, cham√°-la j√° √© suficiente.
                    window.initDynamicForm();
                } else {
                    console.warn(`‚ö†Ô∏è O script ${formName}.js n√£o possui a fun√ß√£o initDynamicForm().`);
                }
                resolve(); // Resolve a promise, indicando sucesso.
            };

            script.onerror = () => {
                console.error(`‚ùå Erro fatal ao carregar o script ${jsUrl}`);
                // Rejeita a promise, o que far√° o bloco catch principal ser acionado.
                reject(new Error(`Falha ao carregar o script ${jsUrl}`));
            };

            document.body.appendChild(script);
        });

    } catch (error) {
        console.error('üí• Erro no processo de loadForm:', error);
        container.innerHTML = `<p style="color:red; text-align:center;">${error.message}</p>`;
    } finally {
        // 8. LIBERA√á√ÉO DA TRAVA
        // Este bloco ser√° executado sempre, seja em caso de sucesso ou de erro,
        // garantindo que a aplica√ß√£o n√£o fique "travada".
        isFormLoading = false;
        console.log(`‚èπÔ∏è Carregamento do formul√°rio ${formName} finalizado. Trava liberada.`);
    }
}

function showErrorModal(errorData) {
    // const modal = document.getElementById('errorModal');
    // if (!modal) {
    //     // Alternativa caso a modal n√£o exista no HTML
    //     alert((errorData.title || "Erro") + "\n\n" + (errorData.detail || "Ocorreu um erro."));
    //     return;
    // }

    // const titleElement = document.getElementById('errorModalTitle');
    // const detailElement = document.getElementById('errorModalDetail');
    // const closeBtn = document.getElementById('errorModalCloseBtn');

    // titleElement.textContent = errorData.title || 'Erro Inesperado';
    // detailElement.textContent = errorData.detail || 'N√£o foram fornecidos mais detalhes pelo servidor.';
    // modal.style.display = 'block';

    // closeBtn.onclick = () => modal.style.display = 'none';
    // window.onclick = (event) => {
    //     if (event.target == modal) modal.style.display = 'none';
    // };
}

// Adicione esta fun√ß√£o ao seu arquivo js/main.j, se ela n√£o estiver l√°
async function loadProductCategories(selectElement, defaultOptionText = 'Selecione uma categoria') { 
    if (!selectElement) return; 
    
    try { 
        const accessToken = localStorage.getItem('accessToken'); 
        const response = await fetch(`${API_BASE_URL}/categories`, { headers: { 'Authorization': `Bearer ${accessToken}` } }); 
        
        // --- CORRE√á√ÉO APLICADA AQUI ---
        // Verifica primeiro se a requisi√ß√£o falhou
        if (!response.ok) {
            // Se o erro for um 400 (Bad Request), tentamos ler a mensagem
            if (response.status === 400) {
                const errorData = await response.json();
                // Verificamos se √© a mensagem espec√≠fica de "sem categorias"
                if (errorData && errorData.message === "N√£o h√° categ√≥rias cadastradas.") {
                    selectElement.innerHTML = `<option value="">Nenhuma categoria cadastrada</option>`;
                    selectElement.disabled = true;
                    return; // Encerra a fun√ß√£o aqui, pois j√° tratamos o caso
                }
            }
            // Para todos os outros erros, lan√ßa uma exce√ß√£o
            throw new Error(`Falha ao carregar categorias (Status: ${response.status})`);
        }
        
        const categories = await response.json(); 
        
        // Esta parte continua a mesma para o caso de sucesso com uma lista vazia
        if (!categories || categories.length === 0) {
            selectElement.innerHTML = `<option value="">Nenhuma categoria cadastrada</option>`;
            selectElement.disabled = true;
        } else {
            // Se houver categorias, preenche o select normalmente
            selectElement.disabled = false;
            selectElement.innerHTML = `<option value="">${defaultOptionText}</option>`; 
            categories.forEach(category => { 
                const option = new Option(category.name, category.id); 
                selectElement.appendChild(option); 
            }); 
        }
        // --- FIM DA CORRE√á√ÉO ---

    } catch (error) { 
        console.error('Erro ao carregar categorias:', error); 
        selectElement.innerHTML = '<option value="">Erro ao carregar</option>'; 
        // N√£o relan√ßamos o erro para n√£o quebrar a inicializa√ß√£o de outras partes da p√°gina
    } 
}